<?xml version="1.0"?>
<!DOCTYPE book SYSTEM "file:///usr/share/sgml/docbook/xml-dtd-4.1.2-1.0-8/docbookx.dtd">

<section>
<title> Random number generators based on the uniform </title>

<para/>
Table reference??
provides the names of R functions that generate pseudo-random
numbers for many of the standard probability distributions.  
We can build random number generators based on these generators.
For example, to generate numbers from the truncated normal distribution,
we use the normal generator <s:code>rnorm</s:code>:
<s:code>
max(-3, min(3, rnorm(100)))
</s:code>.
Or, we can produce random numbers from the standard normal that are contaminated
at the 5% level with observations from the normal with mean 3 and sd 0.5.
That is, a number being generated has a 95% chance of coming from the N(0,1)
and a 5% chance of coming from the N(3,0.25). 
We use random numbers from the Bernoulli(p) distribution (i.e. the binomial(1,p)),
to determine from which normal distribution to sample.
<s:code>
contam = rbinom(100, 1, p=0.5)
rnorm(100, mean = 3*contam, sd = 1 - 0.5*contam)
</s:code>  
 
<para/>
As another example, we use the multinomial random-number
generator, <s:code>rmultinom</s:code>,
to generate data from a discrete probability 
distribution that places probabilities p<subscript>1</subscript>,
p<subscript>2</subscript>, ... p<subscript>m</subscript> 
on the numbers  
x<subscript>1</subscript>,
x<subscript>2</subscript>, ... x<subscript>m</subscript>, respectively.
  <!-- I would use sample() here.  -->
<s:code>
multi = rmultinom(100,1,p)
xmulti = xx * multi
xmulti[ xmulti != 0]
</s:code>
Alternatively, we can use the uniform random number generator,
where we divide the unit interval into consecutive subintervals of length
p<subscript>1</subscript>,
p<subscript>2</subscript>, ... p<subscript>m</subscript>, called
I<subscript>1</subscript>,
I<subscript>2</subscript>, ... I<subscript>m</subscript>. 
When the uniform random number falls in a particular interval, say 
I<subscript>j</subscript> it generates the number x<subscript>j</subscript>.

<exercise>
<question>
Write the R code to use <s:code>runif</s:code> to 
generate 100 observations from the discrete probability
distribution that places probability 
0.1, 0.1, 0.3, 0.1, 0.1, 0.2, 0.1 on the values
1, 3, 7, 14, 20, 21, 22.
</question>
<answer>
</answer>
</exercise>
Note that the <s:code>sample</s:code> function in R can
generate these random samples.

<para/>
The uniform random number generator is an extremeley useful generator because
uniform random numbers can generate numbers from other probability distributions.
There are two basic approaches for doing this. The first uses the inverse of
the cumulative distribution function (CDF) of the distribution.
Every probability distribution has a unique cumulative distribution function,
typically denoted F.
The cumulative distribution function provides the probabilities, 
<equation>
  F(x) = Probability(random number &lt = x)
<equation>
for <equation> x in (- infinity , infinity) </equation>.
Notice that the range of the CDF is [0,1], and that
it is an increasing function.
When the CDF is continuous, it will have an inverse,
<math:variable>F>\<superscript>-1</superscript></math:variable>,
with domain [0,1].

<para/>
For the inverse CDF method, generate random numbers
<math:variable>u<subscript>1</subscript></math:variable>, ...
<math:variable>u<subscript>n</subscript></math:variable>.
Then apply the inverse CDF to these random numbers to obtain 
<math:variable>x<subscript>1</subscript></math:variable>, ...
<math:variable>x<subscript>n</subscript></math:variable>,
where 
<equation>x<subscript>j</subscript> = F>\<superscript>-1</superscript> 
(u<subscript>j</subscript>)
</equation>

<para/>
To see that these <math:variable>x<subscript>j</subscript></math:variable>
form a sample from the probabilty distribution with CDF 
<math:variable>F</math:variable>, note that for any x_j, 

<equationarray>
<equation>
Probability(x<subscript>j</subscript> le x ) = Prob ( F-1 (u<subscript>j</subscript>) le x)
</equation>
<equation>
   = Prob ( F(F<superscript>-1</superscript> (u<subscript>j</subscript>) le F(x) )
</equation>
<equation>
   = Prob (u<subscript>j</subscript> le F(x) )
</equation>
<equation>
   = F(x)
</equation>
<equationarray>

<exercise>
<question>
Use the inverse CDF method of random number generation
to generate 1000 random numbers from the distribution with
CDF,
xxx.
Check your algorithm by plotting the ordered random numbers
against the quantiles of the distribution.
</question>
<answer>
</answer> 
<question>
How can you adjust the inverse CDF method for use
with discrete probability distributions, where the
CDF is no longer strictly increasing?
</question>
<answer>
</answer>
</exercise>

</section>


