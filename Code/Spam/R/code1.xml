<?xml version="1.0"?>

<article xmlns:s="http://cm.bell-labs.com/stat/S4"
         xmlns:rx="http://www.regex.com/">
<section>
<title>Reading Mail Messages</title>

Once we learn enough about R, the task of reading the mail messages in
the <s:package>RSpamData</s:package> package into S as S objects is
reasonably straightforward.  Before we start, we want to think about
what we want to end up with. If we just start writing code, there is a
danger that we will get confused and the code will become inter-twined
with doing several different things.  So what do we want to end up
with?  The exact structure of the result depends on what we want to do
with it in the future.  But a reasonable structure is to end up with a
collection of S objects with an element for each mail message.  Each
message should have at least three pieces of information:
<itemizedlist>
<listitem> the message text or body
</listitem>
<listitem>
the elements of the header telling us
about the sender, recipient(s), 
date sent, routing information of the message,
mail program used to compose the message, etc.
</listitem>
<listitem>
a logical value indicating whether the message was SPAM
or HAM. We want this in the message as it can only be determined
from the name of the directory in which the message
was stored. It is not something we can determine from the
message itself. 
</listitem>
</itemizedlist>
While the filenames of the messages are not relevant to processing
their contents, it is often useful when debugging to be able to ask
for the name of the file in which a message was located.  This allows
us to easily identify and view the source and compare it with the
resulting S object that we compute.
So we will also put in the name of the file for each message.


<para/>

While the overall task is to process all the messages in the
<s:package>RSpamData</s:package> package, we should develop our code
by reading in just a few messages.  We develop our code in separate
units, namely functions, to process individual messages and then
gradually work up or out-wards to process all of the messages.  These
top-level steps are merely loops over the directories and the
individual messages within each of the 5 directories.  The function
for reading an individual message should be the same for all
directories and messages. So we focus on that first and 
try to handle special cases as we encounter them.

<para/> 

One of the useful characteristics of languages like S and Matlab is
that they are interactive and allow us to try commands at the prompt,
correct and perfect them and then add them to functions in an editor.
So the first thing to do is to open an editor and start to create a
function for reading an individual message.  We'll call this function
<s:functionRef>splitMessage</s:functionRef>.  To define the function,
we need to use the <s:keyword>function</s:keyword> keyword and specify
the list of formal arguments and the body of the function.  We assign
the resulting function to <s:variable>splitMessage</s:variable>.

<para/>

The list of formal arguments typically grows as we right functions,
and usually we add convenience arguments or options to control how it
reports information or what it actually does.  When we start to write
a function, we determine what are the essential inputs.  In this case,
we need the name of the file that is to be read.
So we define our function as
<s:code>
splitMessage = 
function(fileName) 
{

}
</s:code>


<para/>

At its simplest, what does this function need to do?
The steps are easy to identify:
<itemizedlist>
<listitem>
 read the lines of the message from the file;
</listitem>
<listitem>
split the message into the header part and the body
part;
</listitem>
<listitem>
 convert the header into a vector of
 named values so we can explore the fields
 later across all messages.
</listitem>
</itemizedlist>

<para/>

How do we read the contents of the file into S?  There are several
functions available to us in R for reading input from files, etc.
Take a look at the
<ulink url="http://cran.r-project.org/manuals/R-data.pdf">
R Data Import/Export manual</ulink>.  Depending on what we want to end
up with, different functions will be easier to use; they all have
different purposes and some provide greater control at the expense of
additional complexity.
Since we want to deal with the header in terms of its
lines, it is probably easiest to import the contents
of the message file as a sequence of lines.
In other words, we want a character vector
with an element per line of the file.

<para/>

We could use the <s:functionRef>scan</s:functionRef> function for
this.  Trial and error will help us get the correct form. 

Before we can get started trying this, we have to find a message file
with which we can experiment.  One thing to do is simply unzip or
un-tar the package, e.g.  <filename>RSpamData_1.0.zip</filename> and
access the messages directly.  This way you can put the messages
wherever you want them.  At the end, we will want to read them from
the installed package so that our code will work on different machines
and not be dependent on having the files in a particular directory
name. After all, we do want the code to work on different machines for
different people so that if we return to it, we don't have to spend
time recalling our original configuration.

<para/>
If we want to find the files in a machine-independent
manner now and not access them directly from our
own copy of the zip or tar file, then we
explore ways to find the files.
A clean way is  to use 
<s:functionRef>system.file</s:functionRef>
to find the full path name of a file or directory
in an installed package.
<s:command>
> library(RSpamDataMini)
> system.file("messages", DirectoryNames, package = "RSpamDataMini")
[1] "/home/duncan/tmp/RSpamDataMini/messages/easy_ham"  
[2] "/home/duncan/tmp/RSpamDataMini/messages/easy_ham_2"
[3] "/home/duncan/tmp/RSpamDataMini/messages/hard_ham"  
[4] "/home/duncan/tmp/RSpamDataMini/messages/spam"      
[5] "/home/duncan/tmp/RSpamDataMini/messages/spam_2"    
</s:command>

And we can get the names of all the files within the
first directory, say, with the command
<s:command>
> list.files(system.file("messages", DirectoryNames, package = "RSpamDataMini")[1], full.names = TRUE)
</s:command>
and we can then just take any element of the resulting character vector.

<s:command>
> list.files(system.file("messages", DirectoryNames, package = "RSpamDataMini")[1], full.names = TRUE)[1]
[1] "/home/duncan/tmp/RSpamDataMini/messages/easy_ham/0121.b475478456e52de66ef0b0fb501bbfd3"
</s:command>
Let's assign this value to the variable
<s:variable>f</s:variable> for easy reference.

<para/>

Now, let's return to reading in the lines of the message.  Just
calling <s:functionRef>scan</s:functionRef> with the name of the file
will result in an error.  This is where we need help in understanding
and debugging the errors.  We can use
<s:functionRef>traceback</s:functionRef> to examine the error after it
has occurred.  Alternatively, and preferrably, we can use
<s:functionRef>recover</s:functionRef> to examine the error when and where it
occurs.
We do this by setting the default error handler for our
R session via the command
<s:expression>
 options(error = recover)
</s:expression>
(I have this in my .Rprofile file that is read when R starts, so it is
on by default in my versions of R. This is convenient.  See the help
for the "Startup" topic, e.g. help(Startup) in R.) 

<para/>
If we call <s:functionRef>scan</s:functionRef>,
we get the following message.
<s:command>
> scan(f)
Error in scan(f) : "scan" expected a real, got "From"

Enter a frame number, or 0 to exit   
1:scan(f) 
Selection: 
</s:command>
Experience tells us that it was trying to read
a number, but found the string
"From".
If we go to the file and look at its contents, we
will see that this "From" is the first word.
So we would need to tell R that we are expecting
strings, not real numbers. We do this via
<s:functionRef>scan</s:functionRef>'s 
<s:arg>what</s:arg> argument.
So
<s:command>
> scan(f, what = "")
</s:command>
behaves better.  But this returns a character vector of words in the
mail message.  We have lost the structure of the lines.
This means we cannot process the header properly.
Indeed, we may not even be able to find the separating
line for the body and header.
So we need to get back the lines of the message, not the words.
So we can tell <s:functionRef>scan</s:functionRef>
what the delimiter or separator is between between "words" or strings.
In this case, we want a newline (\n) to  be the delimiter.
<s:command>
> x = scan(f, what = "", sep = "\n")
</s:command>
And this gets us what we want.

<para/> But we seem to be working at too low a level.  Isn't there a
simple way to read lines from a file?  Let's look at the help page for
<s:functionRef>scan</s:functionRef> and specifically its 'See Also'
section for related functions.  If we do this, we will see a reference
to <s:functionRef>readLines</s:functionRef> which would seem like a
sensible name for the sort of function we are looking for.  So we look
at its help page.  Apart from the fact that it talks about
"connections", it might be what we want.  A connection is just an
abstraction or unifying way to refer to input and output streams such
as files, URLs, pipes, FIFOs, etc.  So it includes files and we are in
luck.  Rather than using <s:functionRef>scan</s:functionRef>,
we can give the following higher-level command that is
marginally easier, and probably conceptually simpler:
<s:command>
> x = readLines(f)
</s:command>

<para/> So now we have performed step 1.  We can add this line to our
function.  We have to change 'f' to the name of our formal argument
that identifies the name of the file.  We called this
<s:variable>fileName</s:variable>.
So we add the line
<s:code>
 x = readLines(fileName)
</s:code>

<para/>

The next step is to separate the message into the header and the body.
We are looking for the <emphasis>first</emphasis> blank line.
We can do this by finding all the blank lines
and then finding the first one.
The command
<s:command>
> x == ""
</s:command>
identifies the blank lines
and we can find their positions or indices in
the message
via
<s:command>
> (1:length(x))[x == ""] 
</s:command>
And the index of the first blank line is then
<s:command>
> ((1:length(x))[x == ""])[1]
</s:command>
i.e. the first element of this vector.

<para/>
Again, there is a simpler way to do this.
The function <s:functionRef>match</s:functionRef>
is useful.
It returns the position of the 
first matching element in the specified table.
If we look for "" in our lines, we will
get the location of the line
separating the header and body:
<s:command>
> match("", x)
</s:command>
Let's call this 
<s:variable>breakPoint</s:variable>.
So we can add this to our function also.

<s:code>
splitMessage =
function(fileName) {
 x = readLines(fileName)
 breakPoint = match("", x)
}
</s:code>

Now, we can get the lines for header and the body.  This is simple
subsetting.  The header is the first, second, third, etc.  lines up to
the one before the break point.  And the body includes all the lines
from just past the separating line to the end.  Or in other words, it
consists of everything but the header and the separator line.

<s:code>
splitMessage =
function(fileName) {
 x = readLines(fileName)
 breakPoint = match("", x)

 header = x[1:(breakPoint-1)]
 body = x[- (1:breakPoint) ]
}
</s:code>

And now, there is just a single remaining step.  We have to convert
the header lines into a named vector.  We write a separate function
for this as it is separate task.  Having a separate function will
allow us to test it separately without having to read the entire
message, and as we will see, we can use it to process the header in
attachments within the message.  We'll call this function
<s:variable>processHeader</s:variable>.
Before we write the function, we can finish our 
current
<s:variable>splitMessage</s:variable>
function by referring to this 
<s:functionRef>processHeader</s:functionRef>
function.
So our code for processing a message looks like
<s:code>
splitMessage =
function(fileName) {
 x = readLines(fileName)
 breakPoint = match("", x)

 header = processHeader(x[1:(breakPoint-1)])
 body = x[- (1:breakPoint) ]

 list(header = header, body = body)
}
</s:code>
and now we need to 
write the
<s:functionRef>processHeader</s:functionRef>


<para/> Again, when writing the function, define the formal arguments
and break the overall task into successive steps.  The inputs to the
function <s:functionRef>processHeader</s:functionRef> consist simply
of the lines of the header given as a character vector.
There are a few steps:
<itemizedlist>
<listitem>
join any continuation lines back to their "parent"
lines
</listitem>
<listitem>
break the lines into 
names and values, separated by the first ':'
</listitem>
</itemizedlist>
Lets start with the first step.  We first need to find the
continuation lines and then we need to rejoin them.  These
continuation lines start with either a space (" ") or a TAB character.
There are different ways to find these lines.  Regular expressions are
the simplest way to do them, assuming you know how to use them.
Unfortunately, we haven't covered these in class yet.  But, let's
consider how we can use them nevertheless.  And then we will cover a
different approach that is more "brute force".

<para/>
What we are looking for are strings in the 
header lines that start with a space or 
a TAB.
We can ask
<s:functionRef>grep</s:functionRef>
to find these lines using
the regular expression
<rx:expr>"^[ \t]"</rx:expr>
as in
<s:command>
> grep("^[ \t]", headerLines)
</s:command>
This magically returns the indices of
the elements in 
<s:variable>headerLines</s:variable>
that match this regular expression.
Try it and see!

<para/> Now lets think about what this regular expression is encoded.
The ^ means "start of line".  Next, we want the next character to be
an element of the set {" ", "\t"}.  We can specify this set using the
[ ] syntax.  So this regular expression is simply looking for a start
of line followed by either element of this set.  And that is what we
get.

<para/>
If we chose not to use regular expressions for whatever reason,
we can do this rather easily to since we are only looking
at the first character of each line.
We can use
<s:functionRef>substring</s:functionRef>
to extract this first character.
<s:command>
substring(headerLines, 1, 1)
</s:command>
We are asking for the substring
starting with the first character and ending
with the first character for each element
of <s:variable>headerLines</s:variable>.
Remember, this function works on each element
of the vector it is given in the first argument
(<s:variable>headerLines</s:variable>).
As a result the is NO need to loop over the elements
of the header lines at this point.

<para/>

Now, we can identify the continuation 
lines by comparing each of the first characters
with both " " and "\t".
We could do this using a logical construct
such as
<s:command>
> firstChar = substring(headerLines, 1, 1)
> firstChar == " " | firstChar == "\t"
</s:command>
Note that we are using the element-wise
OR operator (|) and not ||.
<para/>
And now the remaining task is to fetch the indices of these
continuation lines.
We can do this easily
using the <s:functionRef>which</s:functionRef>
function.
<s:command>
> which(firstChar == " " | firstChar == "\t")
</s:command>

<para/>
Again, even without regular expressions, there is a simpler
way to do things than using 
the expression
<s:expression>firstChar == " " | firstChar == "\t"</s:expression>.
We can again use match.
Here we want to find 
which of these first characters are 
" " or "\t".
So the command
<s:command>
> which(!is.na(match(fc, c(" ", "\t"))))
</s:command>
gives us the positions of the continuation lines.

<para/> Hopefully, the simplicity of the regular expression matching
encourages you that they will be useful. We will cover these next in
lecturs.  And we will see that they do many more things such as
actually modifying text, etc.  based on complex patterns
that would be very hard to program.


<para/>


So at this point, regardless of which approach we used, we have the
positions of the continuation lines in the header character vector.
Our 
<s:functionRef>processHeader</s:functionRef>
looks something like
<s:code>
processHeader =
processHeader =
  #
  # Takes the lines in the header of a message or attachment and
  # brings the continuation lines to their "parent" lines
  # and then breaks these
  #     name: value
  # lines into a named vector of values with names given by the
  # {name} vector.
  #
  # This works for both the message header and the
  # header for each attachment.
  #
function(h)
{
    # Handle the special case where the header is empty.
    # This occurs in some of the attachments.
   if(length(h) == 0 || all(h==""))
     return(character(0))

    # Handle any peculiar first lines of the form
    #    From bob@bob.org
    # by replacing a
    # From at the beginning of the line with
    # X-From: to make it look like the other name: value
    # elements.
   h[1] = gsub("^From", "X-From:", h[1])

    # Now find the continuation lines.
    # We are looking for space or TAB characters in the first
    # character, i.e.  a beginning line followed by a
    # space or a TAB.  TAB is identified by \t.
    # We can also find these lines without regular expressions using
    #  (1:length(h))[!is.na(match(substring(h, 1, 1),  c(" ", "\t")))]
    # grep is easier when we know about regular expressions.
   continuations = grep("^[ \t]", h, extended = TRUE)

}
</s:code>
We also added code to handle the case that 
the function is called with a degenerate header.
And we also handle the case that there
is an strange 
line at the beginning of the message of the form
<literallayout>
From bob@gov.org
</literallayout>
We merely map this to a name: value of
<literallayout>
X-From: bob@gov.org
</literallayout>
this time using
another regular expression and 
<s:functionRef>gsub</s:functionRef>.

<para/>

So messages won't have any continuation lines (although these are
rare).  So we only want to rejoin the continuation lines if there are
any.  So we put the code to rejoin them in condition that checks the
length of the <s:variable>continuations</s:variable> variable is
greater than 0.  And now we come to the only really difficult aspect
of the overall task that is best done with a loop.
What we need to do is take a vector that contains
something like
<literallayout>
<![CDATA[
[10] "Received: from xent.com ([64.161.22.236]) by dogma.slashnull.org"                                         
[11] "    (8.11.6/8.11.6) with ESMTP id g7N5EVZ11380 for <jm@jmason.org>;"                                      
[12] "    Fri, 23 Aug 2002 06:14:32 +0100"                                                                      
[13] "Received: from lair.xent.com (localhost [127.0.0.1]) by xent.com (Postfix)"                               
[14] "    with ESMTP id 0B70E2940D7; Thu, 22 Aug 2002 22:12:10 -0700 (PDT)"                                     
[15] "Delivered-To: fork@example.com"                                                                           
[16] "Received: from crank.slack.net (slack.net [166.84.151.181]) by xent.com"                                  
[17] "    (Postfix) with ESMTP id 4A7D2294099 for <fork@xent.com>; Thu,"                                        
[18] "    22 Aug 2002 22:11:44 -0700 (PDT)"                                                                     
]]>
</literallayout>
and combine elements 11 and 12 with 10,
14 with 13 and 17 and 18 with 16.
One way to do this is to loop over these
continuation lines (11, 12, 14, 17 and 18)
and combine them with the previous line,
i.e. one before it.
If we do this in reverse order,
we will combine 18 with 17 and
then this newly constructed line (17')
with 16.
Similarly, 14 will get pasted to 13
which is what we want.
And finally, 12 will be joined with 11
and that combination will be pasted to 10.
The code to do this is
<s:code>
for(i in rev(continuations)) {
  h[i-1] = paste(h[i-1],  h[i], sep = "\n")
}
</s:code>
We combine the lines with 
the separator \n since that is how they came in the mail message
(i.e. separated by a new line). But this is not very important.
It just means that when we display the resulting text
using <s:functionRef>cat</s:functionRef>,  the text will appear
as it does in the message file.

<para/>
All we are doing here is reversing the order in which we
loop over the continuation lines (via
<s:expression>rev(continuations)</s:expression>
and inserting the result back into the previous element
in the header lines vector.
<para/>
The last step is to then drop the continuation lines
from the header which we can do by excluding the
positions identified in the
<s:variable>continuations</s:variable>
vector.
<s:command>
 h[- continuations ]
</s:command>

<para/>
Now that we have handled the continuation lines,
we are ready to break each of the resulting 
lines into the name and value
pairs.
Perhaps the simplest way to do this is
to break each line into pieces by separating
at each ':'.
<s:functionRef>strsplit</s:functionRef>
does this for us.
<s:command>
 strsplit(h, ":")
</s:command>
Again, this is function that works on all elements
of its
inputs and so there is NO need to loop.
We get back a list with as many elements
as there are in <s:variable>h</s:variable>.
Each element will be a character vector
giving the elements that were separated by the ':'
character.
A line like
<literallayout>
"Date: Fri, 23 Aug 2002 01:15:29 -0400 (EDT)"                                                              
</literallayout>
will be broken up into 4 parts:
<s:output>
[1] "Date"                 " Fri, 23 Aug 2002 01" "15"                  
[4] "29 -0400 (EDT)"      
</s:output>
The first element in each of these vectors is the
name of the field.
The remaining elements (i.e. everything but the first element)
need to be glued back together to make the
value.
So to create the named character vector of values
giving the fields in the header, we
need to loop over the values and paste them back
together again and then use the first element
of each of these character vectors as the name.
Assuming the output from 
<s:functionRef>strsplit</s:functionRef>
is stored in the variable <s:variable>x</s:variable>,
we can do this as follows
<s:code>
 header = sapply(x, function(x) paste(x[-1], collapse=":"))
 names(header) = sapply(x, function(x) x[1])
</s:code>
The first line loops over the elements, dropping the first value in
each character vector and gluing the remaining ones together,
separating them by a ":".  The second line gets the first element of
each vector and assigns the resulting character vector to the names of
the values vector, <s:variable>header</s:variable>.

<para/>
Putting this altogether, our
<s:functionRef>processHeader</s:functionRef>
can be defined as:
<s:code>
<![CDATA[
processHeader =
  #
  # Takes the lines in the header of a message or attachment and
  # brings the continuation lines to their "parent" lines
  # and then breaks these
  #     name: value
  # lines into a named vector of values with names given by the
  # {name} vector.
  #
  # This works for both the message header and the
  # header for each attachment.
  #
function(h)
{
    # Handle the special case where the header is empty.
    # This occurs in some of the attachments.
   if(length(h) == 0 || all(h==""))
     return(character(0))

    # Handle any peculiar first lines of the form
    #    From bob@bob.org
    # by replacing a
    # From at the beginning of the line with
    # X-From: to make it look like the other name: value
    # elements.
   h[1] = gsub("^From", "X-From:", h[1])

    # Now find the continuation lines.
    # We are looking for space or TAB characters in the first
    # character, i.e.  a beginning line followed by a
    # space or a TAB.  TAB is identified by \t.
    # We can also find these lines without regular expressions using
    #  (1:length(h))[!is.na(match(substring(h, 1, 1),  c(" ", "\t")))]
    # grep is easier when we know about regular expressions.
   continuations = grep("^[ \t]", h, extended = TRUE)
   if(length(continuations) > 0) {
      # So we have continuation lines.
      # Loop over them - backwards - and paste
      # the line to the one before it.
      # When we see two consecutive continuation lines
      # e.g.  To: duncan
      #         bob
      #         jane
      # we will paste "jane" to "bob", and then
      # that new line ("bob jane") to "duncan"
      # and get what we want.
     for(i in rev(continuations)) {
       h[i-1] = paste(h[i-1], h[i], sep="\n")
     }

     # And now that we have combined the continuation lines
     # to their parent lines, we need to drop them. So we
     # exclude them from our vector.
     h = h[-1*continuations]
   } 
   

   # Now that we have fixed up the continuation lines, we have
   # simple lines of the form
   #      name: value
   # So we turn these into a named vector
   # To do this, we can split each string at the ':'
   # to get the name and the value.
   # Any value that has a ':' in it will be broken
   # into two or more parts (as many ':' as there are) in the value
   # and so we need to put these back together when storing
   # the value.
   # Note that the pattern for strsplit is a regular expression.
   x = strsplit(h, ":")

    # Put any values that contained : back together again.
    # by taking everything but the name and pasting the elements
    # together.
   header = sapply(x, function(x) {
                         paste(x[-1], collapse=":")
                      })
    # Names are just the first elements of the split.
   names(header) = sapply(x, function(x) x[1])


    # Degenerate cases may leave us with an empty list.
    # In this case, just return an empty vector. This is
    # more for attachment headers.
   if(is.list(header) && length(header) == 0)
     header = character()
   
   header
}
]]>
</s:code>
<para/>

One of the reasons for the addition error checking for
empty/degenerate headers, etc. is that we will use this again to
handle the header part of attachments. By designing this code to be
general and flexible, we can reuse it without having to copy it or
modify it and potentially breaking it.  Having copies of functions
means that we have to update all copies if we find a bug or add a
feature.  Good software design and development minimizes code
duplication and rewards generality when it doesn't add to the
complexity.

<para/> The error checking returns an empty character vector.  In
<s:functionRef>splitMessage</s:functionRef> we returned <s:null/> when
we had a degenerate message.  Why can't we return <s:null/> here?  The
answer is that we of course can.  It turns out that it will be useful
if we return an empty or zero-length character vector for the header
rather than <s:null/>.  The reason is as follows.  We will want to
loop over the messages and compute statistics about each message such
as the number of recipients, the name of the application used to
compose the message, whether anyone was CC'ed (Carbon copied) on the
message, etc.  If we have a character vector for the header fields,
asking for the element named "Content-Type", for example, in the
expression
<s:expression>msg[[1]]$header["Content-Type"]</s:expression> will
return the value or an <s:na/> if the field does not exist in the
vector.  If the header object was <s:null/>, the request for the
element named "Content-Type" would return <s:null/>.  The result would
be that we would mix strings (i.e. when the Content-Type element was
present) with <s:null/> values in the
<s:functionRef>lapply</s:functionRef>/<s:functionRef>sapply</s:functionRef>
call. This would mean we would get back a list, not a character
vector. <s:null/> cannot be put into a vector; <s:na/> can. Since we
want to deal with vectors in the data analysis part of this project,
we will want to avoid <s:null/>s arising in this context and so we
ensure that the header is a character vector.



<s:code>
<![CDATA[
splitMessage =
function(x, attachments = TRUE)
{
 filename = ""

   # If the given string is actually a file name,
   # then read its contents. This is just
   # a convenience to allow us to test this
   # code interactivelyand directly without
   # calling it indirectly via other functions.
 if(length(x) == 1 && file.exists(x)) {
   filename = x
   x = readLines(x)
 }

  # Have to handle any files that aren't actually mesages.
  # Occurs in the actual Spam Assassin corpus.
 if(length(grep("^mv ", x[1]))) {
   warning(paste(filename, "is not a mail message"))
   return(NULL)
 }

  # Get the first empty line.
  el = match("", x)
  # Get the header as being the first through just before
  # this blank line and pass it to the function that converts
  # it into a named vector.
  header = processHeader(x[1:(el-1)]) 

   # The body is everything past the first blank line.
   # So its also x[- c(1:(el-1)) ]
  message = x[-c(1:el)]

   # If we are doing the full attachment thing, process the body.
  if(attachments) 
    message = splitBody(message, header = header, filename = filename)


   # Return an object with two fields, the header and the message.
   # This preserves each as a separate object.
  return(list(header=header, body=message, filename = filename))
}
]]>
</s:code>



<s:code>
<![CDATA[
processHeader =
  #
  # Takes the lines in the header of a message or attachment and
  # brings the continuation lines to their "parent" lines
  # and then breaks these
  #     name: value
  # lines into a named vector of values with names given by the
  # {name} vector.
  #
  # This works for both the message header and the
  # header for each attachment.
  #
function(h)
{
    # Handle the special case where the header is empty.
    # This occurs in some of the attachments.
   if(length(h) == 0 || all(h==""))
     return(character(0))

    # Handle any peculiar first lines of the form
    #    From bob@bob.org
    # by replacing a
    # From at the beginning of the line with
    # X-From: to make it look like the other name: value
    # elements.
   h[1] = gsub("^From", "X-From:", h[1])

    # Now find the continuation lines.
    # We are looking for space or TAB characters in the first
    # character, i.e.  a beginning line followed by a
    # space or a TAB.  TAB is identified by \t.
    # We can also find these lines without regular expressions using
    #  (1:length(h))[!is.na(match(substring(h, 1, 1),  c(" ", "\t")))]
    # grep is easier when we know about regular expressions.
   continuations = grep("^[ \t]", h, extended = TRUE)
   if(length(continuations) > 0) {
      # So we have continuation lines.
      # Loop over them - backwards - and paste
      # the line to the one before it.
      # When we see two consecutive continuation lines
      # e.g.  To: duncan
      #         bob
      #         jane
      # we will paste "jane" to "bob", and then
      # that new line ("bob jane") to "duncan"
      # and get what we want.
     for(i in rev(continuations)) {
       h[i-1] = paste(h[i-1], h[i], sep="\n")
     }

     # And now that we have combined the continuation lines
     # to their parent lines, we need to drop them. So we
     # exclude them from our vector.
     h = h[-1*continuations]
   } 
   

   # Now that we have fixed up the continuation lines, we have
   # simple lines of the form
   #      name: value
   # So we turn these into a named vector
   # To do this, we can split each string at the ':'
   # to get the name and the value.
   # Any value that has a ':' in it will be broken
   # into two or more parts (as many ':' as there are) in the value
   # and so we need to put these back together when storing
   # the value.
   # Note that the pattern for strsplit is a regular expression.
   x = strsplit(h, ":")

    # Put any values that contained : back together again.
    # by taking everything but the name and pasting the elements
    # together.
   header = sapply(x, function(x) {
                         paste(x[-1], collapse=":")
                      })
    # Names are just the first elements of the split.
   names(header) = sapply(x, function(x) x[1])


    # Degenerate cases may leave us with an empty list.
    # In this case, just return an empty vector. This is
    # more for attachment headers.
   if(is.list(header) && length(header) == 0)
     header = character()
   
   header
}



#
# This function iterates over the names of the message files
# within the specified directory and prcess them into
# S objects that represent the different parts of the message
# and whether it is spam or not.
#

readMessages =
function(files = list.files(pattern = "^[0-9]*\\\.", path = dir, full.names = TRUE),
          dir = ".", isSpam = FALSE, verbose = TRUE, ...)
{

   # Note that we pass the ... through the lapply and on to splitMessage.
   # We don't interpret them here. 
  messages = lapply(files, function(i, ...) {
                             if(verbose)
                               cat(i, "\n")
                             el = splitMessage(i, ..., filename = i)
                             el$spam = isSpam
                             el
                           }, ...)

    # We make the return value "invisible' so that it won't print
    # on the console if we call this function directly from the prompt
    # and don't assign the value. If we don't do this, we will get
    # a lengthy display.
   invisible(messages)
}

# These are the names of the directories.
Directories = c("easy_ham", "easy_ham_2", "hard_ham", "spam", "spam_2")

readAllMessages =
function(dirs = system.file("messages", Directories, package = package),
          package = "RSpamData", verbose = 0, ...)
{
   # The package argument allows us to specify whether we want the
   # RSpamData or RSpamDataMini package.

  
   # We loop over the directories and apply a simply function that we define here
   # for simplicity. The function announces its action if verbose is TRUE
   # and then determines from the name of the directory whether the messages in
   # that directory are HAM or SPAM.
   # The return value from readMessage is a list with an element for each message
   # in the directory.

 ans = lapply(dirs, function(i, ...) {
                     if(as.logical(verbose))
                       cat("Directory:" , i, "\n")
                     isSpam = (length(grep("spam", i)) > 0)
                     readMessages(dir = i, verbose = verbose > 0, isSpam = isSpam, ...)
                    })
  
  # Now we have a list with as many elements as there are Directories.
  # Since we just want all the message objects, we want to get rid of
  # this extra layer of hierarchical structure. So we "unravel"
  # this list and put all the > 9,000 messages into a single
  # list using  unlist().  We have to ensure that we don't unravel
  # all the objects by first unravelling this list and then the next
  # layer and so on. So we use recursive = FALSE. Without this, we would
  # end up simply with a very large character vector containing all the
  # text from the mail messages.
 invisible(unlist(ans, recursive = FALSE))
}  



#########################################################################
# These additional functions are responsible for breaking the 
# body of the message into is different elements. Specifically,
# it separates the body into the different attachments.
# What we get back for each body is an S object containing
#  the plain text of the body  (named text)
#  and a list of each of the attachments.
# Each attachment is a pair of values/objects, namely
# the header for the attachment describing its type, etc.
# and the content of the attachment. These are combined in
# a list() with names header and text respectively.


splitBody = 
 #
 # Takes a message and its (processed) header
 # and returns the message broken into 
 # its different attachment elements.
 # The input should be in lines, i.e. a character vector
 # of the lines in the body
 # and the header shoyuld be pre-processed to be a 
 # named character vector of entries.
 #
function(message,  boundary = NULL, header, filename="") 
{
 if(is.null(boundary)) {
    if("Content-Type" %in% names(header))
      boundary = getBoundary(header["Content-Type"])
 }

 if(is.null(boundary) || is.na(boundary))
   return(list(text = message))

 prefix = paste("--", boundary, sep = "")

 starts = (1:length(message))[!is.na(match(message, prefix))]
 ends  = (1:length(message))[!is.na(match(message, paste(prefix, "--", sep = "")))]

#XXX Need this.
 if(length(starts) == 1 && length(ends) == 0)
     ends = length(message)
 
 pos = sort(c(starts, ends))

 if(length(pos) == 0) {
   warning("Message (", filename, ") with boundary for multipart attachments, but can't find match: ", boundary)
   return(list(text = message))
 }
 
 text = message[ - seq(min(pos), max(pos))]
 
 attachments = list()
 for(i in 1:(length(pos)-1)) {
   which = (pos[i] + 1):(pos[i+1]-1)
   attachments[[i]] = processAttachment(message[ which])
 }

 list(text = text, attachments = attachments)
}

processAttachment =
function(lines)
{
   breakPoint = match("", lines)
   header = lines[1:(breakPoint-1)]

   x = processHeader(header)
   header = sapply(x, function(x) {
                        x = gsub("^[ \t]*(.*)[ \t;]*$", "\\1", x)
#XXX
                        x = gsub(";$", "", x)
                        x
                      }
                  )
#   names(header) = sapply(x, function(x) x[1])

   if("Content-Type" %in% names(header)) {
     tmp = strsplit(header["Content-Type"], "/")[[1]][2]
     header["Type"] = gsub(";.*", "", tmp)
   }
  list(header = header, text = lines[-c(1:breakPoint)])
}

getBoundary =
#
# This extracts the boundary identifier string
# given in the type variable
# that should be obtained from
# the Content-Type entry in the header.
function(type)
{
  if(length(names(type)) > 0 && "Content-Type" %in% names(type) )
     type = type["Content-Type"]
  
  type = gsub("\"", "", type)

  boundary = rep(NA, length(type))
  which = grep(" multipart", type)
  if(length(which)) {
     # allow for space after the = sign
    boundary[which] = gsub(".*boundary= *([^;]*);?.*", "\\1", type[which])
  }

  boundary
}
]]>
</s:code>
</section>
</article>
