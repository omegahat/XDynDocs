<?xml version="1.0"?>
<!DOCTYPE slides>
<!-- $Id $ -->

<slides xmlns:xi='http://www.w3.org/2003/XInclude'
        xmlns:s="http://cm.bell-labs.com/stat/S4">

<slidesinfo>
<title>Regular Expression</title>
  <author><firstname>Duncan</firstname><surname>Temple  Lang</surname></author>
  <copyright><year>2004</year><holder>Duncan Temple Lang</holder></copyright>
</slidesinfo>

<foil>

<title>Regular expressions</title>

<itemizedlist>
<listitem>
 Two examples from the homework: 
 <itemizedlist>
  <listitem> find blank lines
  </listitem>
  <listitem> map "From bob@us.gov" to  "X-From: bob@us.gov"
  </listitem>
 </itemizedlist>
</listitem>

<listitem>
  Regular expression:
<s:code>
 grep("^[ \t]", x)
</s:code>

 String manipulation:
<s:code>
 (1:length(x))[!is.na(match(substring(x, 1, 1), c(" ", "\t")))]
</s:code>
</listitem>

<listitem>
  Regular expression:
 <s:code>
    gsub("^From", "X-From:", h[1])
 </s:code>
  String manipulation:
 <s:code>
    if(sustring(h[1], 1, 4) == "From")
     h[1] = paste("X-From:", substring(h[1], 5), sep="")
 </s:code>
</listitem>
</itemizedlist>
</foil>

<foil>
<title></title>

<itemizedlist>
<listitem>
  These rely on being at the start of the string
</listitem>
<listitem>
  What about finding a string anywhere in a line.
</listitem>
<listitem>
  What about matching a  string pattern anywhere in a
  line. 
   <itemizedlist>
    <listitem>
       an  A followed by a C OR
       a G followed by a T
      <?line-break?>
      and two or more of these patterns in succession
   </listitem>
   <listitem> 
      occurrences of the same word twice 
    <?line-break?>
     <itemizedlist>
       <listitem>
         a a
       </listitem>
       <listitem>
         the the
       </listitem>
     </itemizedlist>
   </listitem>
   </itemizedlist>
</listitem>

<listitem>
 Matching  a word, not just a string.
 <?line-break?>
  cat in   "cute cat", "mail catalogs", "bad cat!".
</listitem>

<listitem>
  What about extracting part of a string somewhere in a line.
</listitem>
<listitem>
  extract the value of the boundary string in the line
<literallayout>
Content-Type: multipart/mixed; boundary="----ack1234"
</literallayout>
</listitem>
<listitem>
  extract the date in 
<literallayout>
<![CDATA[
	for <jm@localhost>; Thu, 25 Jul 2002 06:05:36 -0400 (EDT)
]]>
</literallayout>
</listitem>
</itemizedlist>
</foil>


<foil>
<title>What's this to do with Statistics</title>

<itemizedlist>
<listitem>
 Email log information
<literallayout>
<![CDATA[
Feb  3 23:41:18 jessie sendmail[16406]: [ID 801593 mail.info] i144fID8016406: from=<EEQXMCKJDFP@charter.com>, size=13570, class=0, nrcpts=1, msgid=<JXHYECDLQWVAEUZKFHGGTET@verizon.net>, proto=ESMTP, daemon=MTA, relay=guard.research.bell-labs.com [135.104.2.10]
Feb  3 23:41:19 jessie imapd[16410]: [ID 806292 mail.debug] imap service init from 135.104.12.62
Feb  3 23:41:19 jessie imapd[16410]: [ID 234311 mail.info] Login user=kc host=kc-lap.research.bell-labs.com [135.104.12.62]
Feb  3 23:41:19 jessie sendmail[16407]: [ID 801593 mail.info] i144fID8016406: to=<iis@jessie.research.bell-labs.com>, delay=00:00:01, xdelay=00:00:00, mailer=local, pri=43820, dsn=2.0.0, stat=Sent
Feb  3 23:41:49 jessie imapd[16410]: [ID 533678 mail.info] Logout user=kc host=kc-lap.research.bell-labs.com [135.104.12.62]
Feb  3 23:42:19 jessie imapd[16476]: [ID 806292 mail.debug] imap service init from 135.104.12.62
Feb  3 23:42:19 jessie imapd[16476]: [ID 234311 mail.info] Login user=kc host=kc-lap.research.bell-labs.com [135.104.12.62]
Feb  3 23:42:29 jessie sendmail[16478]: [ID 801593 mail.info] i144gTD8016478: from=<fE@henly.f9.co.uk>, size=7141, class=0, nrcpts=1, msgid=<b17f01c3ead8$1ae6f34b$4f6f7a11@S08aYfV>, bodytype=8BITMIME, proto=ESMTP, daemon=MTA, relay=guard.research.bell-labs.com [135.104.2.10]
Feb  3 23:42:29 jessie sendmail[16479]: [ID 801593 mail.info] i144gTD8016478: to=<mitra@jessie.research.bell-labs.com>, delay=00:00:00, xdelay=00:00:00, mailer=local, pri=37394, dsn=2.0.0, stat=Sent
Feb  3 23:42:37 jessie sendmail[16488]: [ID 801593 mail.info] i144gbD8016488: from=<owner-lds-gems@LISTS.LDS.ORG>, size=2896, class=0, nrcpts=1, msgid=<5.1.1.6.2.20040203062440.02c045e0@mail.mstar.net>, proto=ESMTP, daemon=MTA, relay=guard.research.bell-labs.com [135.104.2.9]
Feb  3 23:42:37 jessie sendmail[16489]: [ID 801593 mail.info] i144gbD8016488: to=<nuzman@jessie.research.bell-labs.com>, delay=00:00:00, xdelay=00:00:00, mailer=local, pri=33139, dsn=2.0.0, stat=Sent
]]>
</literallayout>
</listitem>

<listitem>
Different fields in different lines.
</listitem>

<listitem>
Data are in the different fields that are context dependent.
</listitem>

<listitem>
 Exclude lines that are system information, comments, etc.
</listitem>
</itemizedlist>
</foil>

<foil>
<title></title>

<itemizedlist>
<listitem>
 Web log information
<literallayout>
169.237.46.168 - - [26/Jan/2004:10:47:58 -0800] "GET /stat141/Winter04 HTTP/1.1" 301 328 "http://anson.ucdavis.edu/courses/" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR 1.1.4322)"
169.237.46.168 - - [26/Jan/2004:10:47:58 -0800] "GET /stat141/Winter04/ HTTP/1.1" 200 2585 "http://anson.ucdavis.edu/courses/" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR 1.1.4322)"
169.237.46.168 - - [26/Jan/2004:10:47:58 -0800] "GET /stat141/Winter04/Class.css HTTP/1.1" 404 1227 "http://winnie.ucdavis.edu/stat141/Winter04/" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR 1.1.4322)"
169.237.46.168 - - [26/Jan/2004:10:47:58 -0800] "GET /stat141/Winter04/ucd1.gif HTTP/1.1" 200 6122 "http://winnie.ucdavis.edu/stat141/Winter04/" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR 1.1.4322)"
169.237.46.168 - - [26/Jan/2004:10:48:06 -0800] "GET /stat141/Winter04/annnouncements.htm HTTP/1.1" 404 1227 "http://winnie.ucdavis.edu/stat141/Winter04/" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR 1.1.4322)"
169.237.46.168 - - [26/Jan/2004:10:48:07 -0800] "GET /stat141/Winter04/Class.css HTTP/1.1" 404 1227 "http://winnie.ucdavis.edu/stat141/Winter04/" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR 1.1.4322)"
169.237.46.173 - - [26/Jan/2004:11:03:07 -0800] "GET /stat141/Winter04/discussion2.html HTTP/1.1" 404 1056 "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)"
169.237.46.173 - - [26/Jan/2004:11:03:12 -0800] "GET /stat141/Winter04/ HTTP/1.1" 200 2585 "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)"
169.237.46.173 - - [26/Jan/2004:11:03:12 -0800] "GET /stat141/Winter04/Class.css HTTP/1.1" 404 1227 "http://winnie.ucdavis.edu/stat141/Winter04/" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)"
169.237.46.173 - - [26/Jan/2004:11:03:12 -0800] "GET /stat141/Winter04/ucd1.gif HTTP/1.1" 200 6122 "http://winnie.ucdavis.edu/stat141/Winter04/" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)"
169.237.46.173 - - [26/Jan/2004:11:03:15 -0800] "GET /stat141/Winter04/handouts.html HTTP/1.1" 200 558 "http://winnie.ucdavis.edu/stat141/Winter04/" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)"
169.237.46.173 - - [26/Jan/2004:11:03:17 -0800] "GET /stat141/Winter04/Handouts/discussion2.html HTTP/1.1" 200 6100 "http://winnie.ucdavis.edu/stat141/Winter04/handouts.html" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)"
169.237.46.173 - - [26/Jan/2004:11:03:20 -0800] "GET /stat141/Winter04/Handouts/discussion3.html HTTP/1.1" 200 3003 "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)"
169.237.99.188 - - [26/Jan/2004:11:03:47 -0800] "GET /stat141/Winter04 HTTP/1.1" 301 328 "http://www.stat.ucdavis.edu/courses/" "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.2.1) Gecko/20030120"
</literallayout>
</listitem>
<listitem>
 <itemizedlist>
  <listitem>
   Machine of requester
  </listitem>
  <listitem> 
   Date
  </listitem>
  <listitem>
   Command, file, protocol (HTTP or FTP)
  </listitem>
  <listitem>
    return status
  </listitem>
  <listitem>
    number of bytes returned
  </listitem>
  <listitem>
   referring page
  </listitem>
  <listitem>
    browser information.
  </listitem>
 </itemizedlist>
</listitem>
</itemizedlist>
</foil>


<foil>
<title>Regular Expressions</title>

 <itemizedlist>
  <listitem>
    Language for expressing string patterns.
  </listitem>
  <listitem>
    Simplest pattern:  literal string
  </listitem>
  <listitem>
    "From" in "From bob@us.gov"
  </listitem>
  <listitem>
   Matches  "From" in any part of the text <?line-break?>
    &lt;b&gt;From our partners:&lt;/b&gt;
  </listitem>

  <listitem>
  Match "cat" in "dogs and cats", "My cat", "a catalog".
  </listitem>

  <listitem>
   Need way to express patterns:
   <itemizedlist>
    <listitem>
    white space,
    </listitem>
    <listitem>
      word boundaries
    </listitem>
    <listitem>
      sets of characters
    </listitem>
    <listitem>  
     beginning or end of line
    </listitem>
    <listitem>
      alternatives  - AC  or GT
     </listitem>
    <listitem>
      number of matches.
    </listitem>
   </itemizedlist>
  </listitem>

  <listitem>
    modify text by substituting values for patterns. <?line-break?>
<s:code>
    gsub("^From", "X-From:", h[1])
</s:code>
  </listitem>

 <listitem>
   Matching is often, by default, line oriented.
 </listitem>
 </itemizedlist>
</foil>

<foil>
<title>R Functions for Regular Expressions</title>
<itemizedlist>
 <listitem>
  grep()
 </listitem>
 <listitem>
  regexpr()
 </listitem>
 <listitem>
  gsub()
 </listitem>
 <listitem>
  sub()
 </listitem>
</itemizedlist>

<itemizedlist>
<listitem>
Similar facilities available in 
many other programming environments.
<?line-break?>
  Perl, Java, Matlab, C libraries, ...
</listitem>

<listitem>
 Different dialects and extensions <?line-break?>
  Share a common core.
</listitem>

</itemizedlist>

</foil>


<foil>
<title>Meta-Characters</title>
<itemizedlist>
 <listitem>
   Patterns are expressed using meta-characters <?line-break?>
   not interpreted as literal characters.
 </listitem>

 <listitem>
   ^ is a meta-character meaning 
    "start of the line"
 </listitem>
 
 <listitem>
   $ is meta-character meaning "end of the line"
 </listitem>

 <listitem>
   Find empty lines:  <?line-break?>
    <s:code>grep("^$", x)</s:code>
 </listitem>

 <listitem>
   Find empty lines:  <?line-break?>
    <s:code>grep("^$", x)</s:code>
 </listitem>

 <listitem>
  Match lines in WebLogs that end with -
<literallayout>
proxy-6.daimler-benz.com - - [29/Dec/2003:06:35:48 -0600] "GET /R.css HTTP/1.1" 304 -
</literallayout>
  <s:code>grep("-$", x)</s:code>
 </listitem>

 <listitem>
  Match lines in WebLogs that returned 0  bytes.
<literallayout>
220.73.165.205 - - [29/Dec/2003:06:33:01 -0600] "HEAD /src/contrib/xtable_1.1-2.tar.gz HTTP/1.0" 404 0
</literallayout>
  <s:code>grep(" 0$", x)</s:code>
 </listitem>

 <listitem>
  What  can go wrong with this? i.e. what can we miss.
 </listitem>

</itemizedlist>
</foil>

<foil>
<title>Escaping Meta-Characters</title>

 <itemizedlist>
  <listitem>
   What if we want to match a ^ in a string? or a $?
  </listitem>

  <listitem>
   Need to avoid interpretation of ^ or $ as a meta-character
  </listitem>

  <listitem>
    Need to "escape" its meaning 
  </listitem>

  <listitem>
<s:code>
 >  regexpr("\\^", "This has a caret ^.")
</s:code>
  </listitem>

  <listitem>
   In other languages, just need a single \
    <?line-break?>
     $x =~ /\^/;
  </listitem>

</itemizedlist>
</foil>


<foil>
<title>Alternatives</title>

<itemizedlist>
 <listitem>
   We often want to say "match this or this or this"
<?line-break?>
   To or From or Cc followed by a :
 </listitem>

 <listitem>
   The | meta-character allows us to do this
 </listitem>

  <listitem>
    To|From|Cc
  </listitem>
  <listitem>
    Need to add the : to each of them
  <?line-break?>
    To:|From:|Cc:
  </listitem>
 
  <listitem>
    But don't want to repeat : each time
   <?line-break?>
     Gets complicated with more complex expressions than ":"
  </listitem>

  <listitem>
   Need to group (sub-) expressions
    <?line-break?>
    Use the ( ) qualifiers around the sub-expression.
  </listitem>

  <listitem>
    (To|From|Cc):
  </listitem>

  <listitem>
   This will match "To:", "From:" and "Cc:".
  </listitem>
 
  <listitem>
    How do we restrict match to beginning of the line?
  </listitem>

</itemizedlist>

</foil>



<foil>
<title>Character Sets</title>

<itemizedlist>
<listitem>
 In addition to alternative expressions, we often want 
 a simpler form  <?line-break?>

  match any of the  characters in the set
   {a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z}
</listitem>

 <listitem>
   Can write this is as
<?line-break?>
(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)
 </listitem>

 <listitem>
  Cleaner form is
  <?line-break?>
  [abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]
 </listitem>

  <listitem>
   The [ ] pair are meta-characters meaning a character set
  </listitem>

  <listitem>
    The elements within the [ ] are the characters to match.
  </listitem>

  <listitem>
  Now we can make our matching of  WebLog lines  that returned 0
  bytes more precise.
<literallayout>
220.73.165.205 - - [29/Dec/2003:06:33:01 -0600] "HEAD /src/contrib/xtable_1.1-2.tar.gz HTTP/1.0" 404 0
</literallayout>
  <s:code>grep("[ \t]0$", x)</s:code>
  </listitem>
</itemizedlist>
</foil>

<foil>
<title>More on Character Sets</title>
<itemizedlist>
 <listitem>
  Expressing the alphabet, or all numbers is tedious to enumerate completely.
 </listitem>
 <listitem>
   Can use ranges in many common cases 
    <?line-break?>
   [a-f]  <?line-break?>
   [A-Z]  <?line-break?>
   [0-9]
 </listitem>

 <listitem>
  What if we want a - in the character set?
 </listitem>

 <listitem>
   Built-in character sets for:
   <itemizedlist>  
    <listitem>All alphabetic and numeric <emphasis>(alnum)</emphasis></listitem>
    <listitem>All alphabetic (<emphasis>alpha</emphasis>)</listitem>
    <listitem>Blank characters, i.e. space or tab <emphasis>(blank)</emphasis>)</listitem>
    <listitem>Control characters <emphasis>(cntrl)</emphasis></listitem>
    <listitem>Digits <emphasis>(digit)</emphasis></listitem>
    <listitem>Printable character except space <emphasis>(graph)</emphasis></listitem>
    <listitem>Lower case alphabetic characters <emphasis>(lower)</emphasis></listitem>
    <listitem>Upper case alphabetic characters <emphasis>(upper)</emphasis></listitem>
    <listitem>Printable characters <emphasis>(print)</emphasis></listitem>
    <listitem>Punctuation characters <emphasis>(punct</emphasis>)</listitem>
    <listitem>White space <emphasis>(space)</emphasis></listitem>
    <listitem>Hexadecimal digit <emphasis>(xdigit)</emphasis></listitem>
   </itemizedlist>
 </listitem>
 <listitem>
  Used as [[:<emphasis>class-name</emphasis>:]]
 </listitem>
 <listitem>
  regexpr("[[:digit:]]", "Some numbers and text: 1312 and bob")
 </listitem>

 <listitem>
   Need to express "every character <emphasis>except</emphasis> the
   ones in this set"
 </listitem>

 <listitem>
   Do this using the ^ meta-character in a new way (not start of line)
 </listitem>

 <listitem>
   If first character inside the [ ] is a ^, we mean the complement
  of the set.
 </listitem>

 <listitem>
   regexpr("[^0-9]", "10000e10")
 </listitem>
</itemizedlist>
</foil>


<foil>
<title>Other Meta-Characters and Constructs</title>

<itemizedlist>
 <listitem>
    The single character . matches any character.
 </listitem>

 <listitem>
   We also need to be able to specify how the number
  of times an expression need match
 </listitem>

 <listitem>
    Expression by itself - exact match once.
<s:code>
 regexpr("a", "this is a sentence")
</s:code>

 </listitem>

 <listitem>
    Expression followed by * - 0 or more matches.
<s:code>
 regexpr("a*", "this is aaaa sentence")
</s:code>
 </listitem>

 <listitem>
    Expression followed by ? - 0 or 1 matches.
<s:code>
 regexpr("a?", "this is a sentence")
</s:code>
 </listitem>

 <listitem>
    Expression followed by + - 1 or more matches.
<s:code>
 regexpr("f+", "aardvark")
</s:code>
 </listitem>

 <listitem>
 What does   ".*" match?
<?line-break?>
 What does   "^.*$" match?
 </listitem>

</itemizedlist>
</foil>

<foil>
<title>Additional Number of Matches</title>
<itemizedlist>
 <listitem>
   What about exactly 3 "a"s?
 </listitem>
  <listitem>
   aaa
  </listitem>

  <listitem>
    What about ACGT repeated 12 times? Very cumbersome to enumerate
  </listitem>
  <listitem>
    (ACGT){12}
  </listitem>
  <listitem>
   What about one of ACGT or ACCT 12 times?
   or 12 repetitions of either ACGT or ACCT?
  </listitem>

   <listitem>
     And what of 12 or more times?  
      <?line-break?>
     (ACGT){12}(ACGT)*
   </listitem>

  <listitem>
    Convenient expression:
       (ACGT){12,}
  </listitem>

  <listitem>
    And for at least m but not more than n (where m &lt;= n)
    <?line-break?>

     pattern{m,n}
  </listitem>

<listitem>
Combine with more complex sub-expressions
<s:code>
grep("(ACT|GG){2,5}", genes)
</s:code>
</listitem>

  <listitem>
   <itemizedlist>
    <listitem>pattern{m} - exactly m matches</listitem>
    <listitem>pattern{m,} - at least m matches</listitem>
    <listitem>pattern{m,n} - at least m, no more than n matches</listitem>
   </itemizedlist>
  </listitem>
</itemizedlist>
</foil>



<foil>
<title>Grouping and References</title>

<itemizedlist>
<listitem>
  Use to create sub-expressions
</listitem>
<listitem>
  Also can refer to these later in the regular expression 
  <?line-break?>
  use the group number 1, 2, ..., 9 
  <?line-break?>
  Need to escape
</listitem>
<listitem>
  
<s:code>
regexpr("([a-z]+) \\1", c("a a sentence", "with the the in it", "no match"))
</s:code>
</listitem>
</itemizedlist>

</foil>


<foil>
<title>Substitutions and Replacements</title>

<itemizedlist>
<listitem>
Instead of just matching, we want to replace
patterns with other values.
</listitem>

<listitem>
Use gsub()
<?line-break?>
<itemizedlist>
Inputs
 <listitem>
  Regular expression defining what to match
 </listitem>
 <listitem>
  expression of what to substitute for each match
 </listitem>
 <listitem>
  the vector of strings to process.
 </listitem>
</itemizedlist>
</listitem>


<listitem>
Example:<?line-break?>
 gsub("^From[ \t]", "X-From:", x)
</listitem>

<listitem>
Replaces only the matching element.<?line-break?>
To remove other pieces in result, must match those
expressions also.
</listitem>

<listitem>
<s:code>
gsub("from", "to", "Note from bob")
</s:code>
</listitem>

</itemizedlist>


</foil>

<foil>
<title>More Complex Substitution</title>
<itemizedlist>

<listitem>
 We often need to refer to the actual value that was matched by the
 regular expression  in the value we are substituting.
</listitem>

<listitem>
Example:
Check for "multipart" in string and 
grab the value of the boundary setting.
<literallayout>
multipart/mixed; boundary="Boundary_(ID_xjiotMI3LbV/zJ0Zs39NiA)"
</literallayout>
</listitem>

<listitem>
Using gsub(), what do we use for the pattern and the
substitution?
<s:code>
gsub("multipart.*boundary=!!!!!!" ,
       "!!!!!!",
      'multipart/mixed; boundary="Boundary_(ID_xjiotMI3LbV/zJ0Zs39NiA)"'
</s:code>      
to get
<literallayout>
"Boundary_(ID_xjiotMI3LbV/zJ0Zs39NiA)"
</literallayout>
</listitem>

<listitem>
Each group we create in the
regular expression to match can be referenced by
its number, i.e 1, 2, 3, ... 9
</listitem>
<listitem>
Refer to the group by escaping the number in the substitution pattern:
</listitem>

<listitem>
gsub(".*multipart.*boundary= *([^;]*);?.*", "\\1", type)
</listitem>

</itemizedlist>
</foil>


<foil>
<title>Web Log Substitution Example</title>
<itemizedlist>
<listitem>
Example: <?line-break?>
transform Web log line into 
comma-separated list of 
IP address, date, file, status, bytes
<?line-break?>
Then access values with strsplit().
</listitem>

<listitem>
Transform
<literallayout>
193.188.97.151 - - [29/Dec/2003:06:36:18 -0600] "GET /logo.html  HTTP/1.1" 200 244
</literallayout>
to
<literallayout>
193.188.97.151, 29/Dec/2003:06:36:18, /logo.html, 200, 244
</literallayout>
and then
strsplit("193.188.97.151, 29/Dec/2003:06:36:18, /logo.html, 200, 244", ",")
</listitem>

<listitem>
<literallayout>
(.*) - - \\[(.*) [-+][0-9]+\\] "(GET|POST) (.*) (HTTP|FTP)(/1.[01])?" ([0-9]+) (-|[0-9]+)
</literallayout>
</listitem>
<listitem>
Substitution string:
<literallayout>
\\1,\\2,\\4,\\7,\\8
</literallayout>
Skip over the groups we need for the match, but not for the substitution.
</listitem>

<listitem>
Syntax available for not numbering a group, if necessary
</listitem>

<listitem>
Note that we have to make certain that the separator we use is not in
any of the elements we want!  <?line-break?> We would like to get back
the elements we match directly.
<?line-break?>
Perl can do this.
</listitem>

</itemizedlist>
</foil>


<foil>
<title>Pitfalls of Regular Expressions</title>

<itemizedlist>
<listitem>
Regular expressions are greedy <?line-break?>
they match as much as they can!
</listitem>
<listitem>
Discard HTML tags?
<s:code>
<![CDATA[
gsub("<.*>", "", 'URL: <a  href="http://www.bob.org"><i>Bob</i></a><p>')
[1] "URL: "
]]>
</s:code>
</listitem>

<listitem>
Need to be more specific:
<?line-break?>
<s:code>
<![CDATA[
gsub("<[^<]*>", "", 'URL: <a  href="http://www.bob.org"><i>Bob</i></a><p>')
[1] "URL: Bob"
]]>
</s:code>
</listitem>

<listitem>
And what about a real &lt; that is not part of the 
HTML, e.g. \\&lt;?
</listitem>

<listitem>
They require experimentation and experience.
<?line-break?>
Practice.
</listitem>

</itemizedlist>
</foil>

</slides>





