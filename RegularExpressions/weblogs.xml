<?xml version="1.0"?>

<article xmlns:s="http://cm.bell-labs.com/stat/S4"
         xmlns:r="http://www.r-project.org"
         xmlns:c="http://www.c.org"
         xmlns:sh="http://www.shell.org"
         xmlns:rx="http://www.regex.org"
         xmlns:perl="http://www.perl.org">


<section>
<title>Processing Web server log files in R via regular expressions.</title>
In homework 2, question 4, I said that one could read the log files
into R directly rather than preparing the data into a rectangular,
TAB-separated file.  There are serveral ways to do this.
Given the structure of the data, we can identify different fields relatively easily
and construct regular expressions to extract the pieces we want.

The first field is an IP address.  This is often termed a dotted-quad
meaning that there are four terms separated by a "dot".  Each term is
a sequence of between 1 and 3 digits.  To precisely match a string as
an IP address, we would have to check the range of the different
components to ensure that they are legal, i.e. between 0 and 255.  But
in this context, we know the values are legitimate IP addresses and so
we can just match the 4 components.
<rx:pattern>
[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}
</rx:pattern>

<para/>
The next two elements of the line are literal "-" characters
so we can specify them "as is".

<para/>
We want to pick up the date field next.  Since we know the format
(day/month/year:Hour:Minute:Second Timezone), we can explicitly list
this as a pattern. Alternatively, we could collect everything between
the pair of [], i.e. <rx:pattern>\\[.*\\]</rx:pattern>.  There is a
danger that we will read too much and "leak" over into other fields.
Note that this may be a great deal slower as it has to potentially do
a lot of look aheads and not match an exact pattern. But of course, it
is easier to specify.  We can do both and see if they both yield the
same result and also which is quicker.


ss =  gsub("^([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}) - - \\[([0-9]{1,2}/[a-zA-z]{3}/[0-9]{4}\\:[0-9]{2}\\:[0-9]{2}\\:[0-9]{2} -[0-9]{4})\\] \"GET (.*) HTTP/1.[0-1]{1}\" [0-9]{3} (-|[0-9]*) \"(.*)\" \"(.*)\"","\\1###$$$###\\2###$$$###\\4###$$$###\\5###$$$###\\6###$$$###\\7", ll)






And we can pick up additional variables easily
such as the  type of operation (GET,  POST, etc.), 
the version of HTTP being used


<s:code>
ff =  gsub("^([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}) - - \\[([0-9]{1,2}/[a-zA-z]{3}/[0-9]{4}\\:[0-9]{2}\\:[0-9]{2}\\:[0-9]{2} -[0-9]{4})\\] \"(GET|PUT|PROPFIND|OPTIONS|HEAD|POST) (.*) HTTP/1.([0-1]).*\" [0-9]{3} (-|[0-9]*) \"(.*)\" \"(.*)\"","\\1###$$$###\\2###$$$###\\5###$$$###\\6###$$$###\\7###$$$###\\8###$$$###\\3###$$$###\\4", ll)
</s:code>


<s:code>
rowEls = strsplit(ff, "###\\$\\$\\$###)
</s:code>

We want to verify that we have 8 fields in each line.
<s:code>
len = sapply(rowEls, length)
table(len)
</s:code>

And now we turn the data into a data frame.
<s:code>
m = matrix(unlist(rowEls), , 8, byrow = TRUE)
d = data.frame(IP = I(m[,1]), 
               Date = as.POSIXct(strptime(m[,2], "%d/%b/%Y:%H:%M:%S %Z")), 
               HTTPVersion = m[,3]),   # factor
               Bytes = as.integer(m[,4]), 
               Referral = I(m[,5]), 
               UserAgent = I(m[,6]),
               HTTPOperation = m[,7],  # factor.
               Document = I(m[,8]))

d[sapply(d, class) == "AsIs"] = lapply(d[sapply(d, class) == "AsIs"], as.character)
</s:code>

And now we have our data.

<para/>

Notice that it is very useful to be able to do things two ways and
compare the results. Thus being able to create the data via shell
tools and read it in via <s:function>read.table</s:function> and also
reading it directly to R via <s:function>gsub</s:function> allows us
to verify the results.

</article>